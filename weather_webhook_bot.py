from datetime import time, datetime
from telegram.ext import MessageHandler, filters, CallbackContext
import plotly.graph_objs as go
from translitua import translit, RussianSimple
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler
import matplotlib.pyplot as plt
from io import BytesIO
import aiohttp
from telegram import (
    Application, # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Application –Ω–∞–ø—Ä—è–º—É
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import os
import uvicorn
import sys

# üîß –û–¢–†–ò–ú–£–Ñ–ú–û API KEY –¢–ê –¢–û–ö–ï–ù –ó–Ü –ó–ú–Ü–ù–ù–ò–• –°–ï–†–ï–î–û–í–ò–©–ê (REPLIT SECRETS / RENDER ENVIRONMENT)
# –í–∞–∂–ª–∏–≤–æ: –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –¥–æ–¥–∞–ª–∏ —Ü—ñ –∑–º—ñ–Ω–Ω—ñ —É —Ä–æ–∑–¥—ñ–ª "Environment" –Ω–∞ Render
WEATHER_API_KEY = os.environ.get('WEATHER_API_KEY')
BOT_TOKEN = os.environ.get('BOT_TOKEN')
# –ó–ú–Ü–ù–ï–ù–û: –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—Ç, –Ω–∞–¥–∞–Ω–∏–π Render.com. Render –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î 10000.
PORT = int(os.environ.get('PORT', 8080))
# –î–û–î–ê–ù–û: URL –≤–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É Render. –ô–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ —è–∫ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–∞ Render.
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–º—ñ–Ω–Ω—ñ –±—É–ª–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ (–¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É)
if not WEATHER_API_KEY:
    print("–ü–æ–º–∏–ª–∫–∞: –ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ 'WEATHER_API_KEY' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Render Environment.")
if not BOT_TOKEN:
    print("–ü–æ–º–∏–ª–∫–∞: –ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ 'BOT_TOKEN' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Render Environment.")
if not WEBHOOK_URL:
    print("–ü–æ–º–∏–ª–∫–∞: –ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ 'WEBHOOK_URL' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –í–æ–Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è Webhooks. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Render Environment.")

# --- –°–ª–æ–≤–Ω–∏–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ --- (–∑–º—ñ–Ω–µ–Ω–æ, –¥–æ–¥–∞–Ω—ñ –Ω–æ–≤—ñ –∫–ª—é—á—ñ)
TRANSLATIONS = {
    'uk': {
        'initial_welcome': "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥ Weather Online Bot! üå§Ô∏è\n\n–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 7 –¥–Ω—ñ–≤ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º—ñ—Å—Ç–∞ —Å–≤—ñ—Ç—É, –∞ —Ç–∞–∫–æ–∂ –ø–æ–∫–∞–∂—É –∑—Ä—É—á–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ —Ç–∞ –≤–æ–ª–æ–≥–æ—Å—Ç—ñ.",
        'greeting_start': "–û–±–µ—Ä–∏ –º—ñ—Å—Ç–æ –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥–∏ –π–æ–≥–æ –Ω–∞–∑–≤—É:",
        'searching_city': "üîé –®—É–∫–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è: *{city_name}*...",
        'forecast_for': "üìç –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è *{location_name}, {country_name}* –Ω–∞ 7 –¥–Ω—ñ–≤:\n\n",
        'date_label': "üìÖ *{date}*",
        'condition_label': "üå§Ô∏è {condition}",
        'temperature_label': "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {min_temp}¬∞C - {max_temp}¬∞C (—Å–µ—Ä–µ–¥–Ω—è: {avg_temp}¬∞C)",
        'humidity_label': "üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%",
        'wind_label': "üí® –í—ñ—Ç–µ—Ä: {wind} –∫–º/–≥–æ–¥",
        'uv_index_label': "‚òÄÔ∏è –£–§-—ñ–Ω–¥–µ–∫—Å: {uv_index}",
        'chance_rain_label': "‚òÇÔ∏è –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –¥–æ—â—É: {chance_rain}%",
        'chance_snow_label': "‚ùÑÔ∏è –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Å–Ω—ñ–≥—É: {chance_snow}%",
        'sunrise_label': "‚¨ÜÔ∏è –°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunrise}",
        'sunset_label': "‚¨áÔ∏è –ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunset}\n\n",
        'error_data': "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞.",
        'chart_temp_title': "–°–µ—Ä–µ–¥–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ 7 –¥–Ω—ñ–≤",
        'chart_humidity_title': "üìà –°–µ—Ä–µ–¥–Ω—è –≤–æ–ª–æ–≥—ñ—Å—Ç—å –Ω–∞ 7 –¥–Ω—ñ–≤",
        'chart_interactive_title': "üìä –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–∞ –í–æ–ª–æ–≥—ñ—Å—Ç—å",
        'chart_temp_caption': "üìä –ì—Ä–∞—Ñ—ñ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏",
        'chart_humidity_caption': "üíß –ì—Ä–∞—Ñ—ñ–∫ –≤–æ–ª–æ–≥–æ—Å—Ç—ñ",
        'chart_interactive_caption': "üß† –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ (–≤—ñ–¥–∫—Ä–∏–π —É –±—Ä–∞—É–∑–µ—Ä—ñ)",
        'choose_city_button': "–Ü–Ω—à–µ –º—ñ—Å—Ç–æ üìù",
        'manual_city_prompt': "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –≤—Ä—É—á–Ω—É:",
        'getting_forecast_for': "üîé –û—Ç—Ä–∏–º—É—é –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: *{city_name}*...",
        'xaxis_title': "–î–∞—Ç–∞",
        'yaxis_title': "–ó–Ω–∞—á–µ–Ω–Ω—è",
        'temp_legend': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
        'humidity_legend': '–í–æ–ª–æ–≥—ñ—Å—Ç—å (%)',
        'chart_interactive_caption_filename': "–ì—Ä–∞—Ñ—ñ–∫_–ø–æ–≥–æ–¥–∏.html",
        # --- –ù–û–í–Ü –ü–ï–†–ï–ö–õ–ê–î–ò –î–õ–Ø –ü–û–ì–û–î–ò–ù–ù–û–á –ü–û–ì–û–î–ò ---
        'hourly_weather_button': "–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ –ø–æ–≥–æ–¥–∞ ‚è∞",
        'hourly_forecast_for': "–ü–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è *{location_name}*:",
        'hourly_details': "*{time}*: {temp}¬∞C, {condition}, –í—ñ—Ç–µ—Ä: {wind} –∫–º/–≥–æ–¥",
        'no_hourly_data': "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞.",
        'choose_date_hourly': "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:",
        'hourly_back_to_main_menu': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é –º—ñ—Å—Ç–∞",
        'hourly_forecast_caption': "üìä –ü–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
        'hourly_chart_title': "–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        'hourly_chart_caption': "üìä –ì—Ä–∞—Ñ—ñ–∫ –ø–æ–≥–æ–¥–∏–Ω–Ω–æ—ó —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏",
        'additional_options_prompt': "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó:",
        'what_next_prompt': "–©–æ –¥–∞–ª—ñ?",
    },
    'en': {
        'initial_welcome': "üëã Hello! I'm your personal meteorologist, Weather Online Bot! üå§Ô∏è\n\nI'll help you get a detailed 7-day weather forecast for any city in the world, and also show you convenient temperature and humidity charts.",
        'greeting_start': "Choose a city below or enter its name:",
        'searching_city': "üîé Searching for weather forecast for: *{city_name}*...",
        'forecast_for': "üìç Weather forecast for *{location_name}, {country_name}* for 7 days:\n\n",
        'date_label': "üìÖ *{date}*",
        'condition_label': "üå§Ô∏è {condition}",
        'temperature_label': "üå°Ô∏è Temperature: {min_temp}¬∞C - {max_temp}¬∞C (average: {avg_temp}¬∞C)",
        'humidity_label': "üíß Humidity: {humidity}%",
        'wind_label': "üí® Wind: {wind} km/h",
        'uv_index_label': "‚òÄÔ∏è UV Index: {uv_index}",
        'chance_rain_label': "‚òÇÔ∏è Chance of rain: {chance_rain}%",
        'chance_snow_label': "‚ùÑÔ∏è Chance of snow: {chance_snow}%",
        'sunrise_label': "‚¨ÜÔ∏è Sunrise: {sunrise}",
        'sunset_label': "‚¨áÔ∏è Sunset: {sunset}\n\n",
        'error_data': "‚ö†Ô∏è Failed to get data. Please check the city name.",
        'chart_temp_title': "Average Temperature for 7 Days",
        'chart_humidity_title': "üìà Average Humidity for 7 Days",
        'chart_interactive_title': "üìä Interactive Chart: Temperature & Humidity",
        'chart_temp_caption': "üìä Temperature Chart",
        'chart_humidity_caption': "üíß Humidity Chart",
        'chart_interactive_caption': "üß† Interactive Chart (open in browser)",
        'choose_city_button': "Other city üìù",
        'manual_city_prompt': "‚úçÔ∏è Enter city name manually:",
        'getting_forecast_for': "üîé Getting forecast for: *{city_name}*...",
        'xaxis_title': "Date",
        'yaxis_title': "Value",
        'temp_legend': 'Temperature (¬∞C)',
        'humidity_legend': 'Humidity (%)',
        'chart_interactive_caption_filename': "Weather_Chart.html",
        # --- NEW TRANSLATIONS FOR HOURLY WEATHER ---
        'hourly_weather_button': "Hourly Weather ‚è∞",
        'hourly_forecast_for': "Hourly forecast for *{location_name}*:",
        'hourly_details': "*{time}*: {temp}¬∞C, {condition}, Wind: {wind} km/h",
        'no_hourly_data': "Failed to get hourly forecast for this city.",
        'choose_date_hourly': "Choose a date for hourly forecast:",
        'hourly_back_to_main_menu': "‚¨ÖÔ∏è Back to city menu",
        'hourly_forecast_caption': "üìä Hourly forecast",
        'hourly_chart_title': "Hourly Temperature",
        'hourly_chart_caption': "üìä Hourly temperature chart",
        'additional_options_prompt': "Additional options:",
        'what_next_prompt': "What's next?",
    }
}

# –ú–∞–ø—É–≤–∞–Ω–Ω—è –∫–æ–¥—ñ–≤ –º–æ–≤ Telegram –Ω–∞ –∫–æ–¥–∏ –º–æ–≤ WeatherAPI
WEATHERAPI_LANG_MAP = {
    'uk': 'uk', 'en': 'en', 'ru': 'ru', 'pl': 'pl', 'es': 'es', 'fr': 'fr', 'de': 'de',
    'pt': 'pt', 'ja': 'ja', 'ko': 'ko', 'it': 'it', 'nl': 'nl', 'th': 'th', 'vi': 'vi',
    'ar': 'ar', 'hi': 'hi', 'bn': 'bn', 'el': 'el', 'hu': 'hu', 'id': 'id', 'fa': 'fa',
    'tl': 'tl', 'tr': 'tr', 'zh': 'zh', 'zh_TW': 'zh_TW'
}


def get_translated_text(user_language_code: str, key: str, **kwargs) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –∑–∞ –∫–ª—é—á–µ–º —Ç–∞ –º–æ–≤–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    –Ø–∫—â–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è –º–æ–≤–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —É–∫—Ä–∞—ó–Ω—Å—å–∫—É (uk).
    """
    lang_code_short = user_language_code.split('_')[0].lower()

    lang_dict = TRANSLATIONS.get(lang_code_short, TRANSLATIONS['uk'])

    text = lang_dict.get(key, f"MISSING_TRANSLATION_KEY:{key}")

    try:
        formatted_text = text.format(**kwargs)
        return formatted_text
    except KeyError as e:
        print(f"ERROR: Missing placeholder for key '{e}' in translation for '{key}' in language '{lang_code_short}'")
        return text


# üå§Ô∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ (7 –¥–Ω—ñ–≤)
async def get_weather_forecast(city, user_lang_code='uk'):
    api_lang = WEATHERAPI_LANG_MAP.get(user_lang_code.split('_')[0].lower(), 'en')

    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={city}&days=7&lang={api_lang}"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                return None, None, get_translated_text(user_lang_code, 'error_data')

            data = await response.json()

            t_forecast_for = get_translated_text(user_lang_code, 'forecast_for',
                                                 location_name=data['location']['name'],
                                                 country_name=data['location']['country'])
            forecast = t_forecast_for

            dates = []
            temps = []
            humidities = []

            for day_data in data["forecast"]["forecastday"]:
                date = day_data["date"]
                day_details = day_data["day"]
                astro_details = day_data["astro"]

                condition = day_details["condition"]["text"]
                avg_temp = day_details["avgtemp_c"]
                max_temp = day_details["maxtemp_c"]
                min_temp = day_details["mintemp_c"]
                wind_kph = day_details["maxwind_kph"]
                humidity = day_details["avghumidity"]

                uv_index = day_details["uv"]
                daily_chance_of_rain = day_details["daily_chance_of_rain"]
                daily_chance_of_snow = day_details["daily_chance_of_snow"]

                sunrise = astro_details["sunrise"]
                sunset = astro_details["sunset"]

                forecast += (
                    get_translated_text(user_lang_code, 'date_label', date=date) + "\n" +
                    get_translated_text(user_lang_code, 'condition_label', condition=condition) + "\n" +
                    get_translated_text(user_lang_code, 'temperature_label', min_temp=min_temp, max_temp=max_temp,
                                         avg_temp=avg_temp) + "\n" +
                    get_translated_text(user_lang_code, 'humidity_label', humidity=humidity) + "\n" +
                    get_translated_text(user_lang_code, 'wind_label', wind=wind_kph) + "\n" +
                    get_translated_text(user_lang_code, 'uv_index_label', uv_index=uv_index) + "\n" +
                    get_translated_text(user_lang_code, 'chance_rain_label',
                                         chance_rain=daily_chance_of_rain) + "\n" +
                    get_translated_text(user_lang_code, 'chance_snow_label',
                                         chance_snow=daily_chance_of_snow) + "\n" +
                    get_translated_text(user_lang_code, 'sunrise_label', sunrise=sunrise) + "\n" +
                    get_translated_text(user_lang_code, 'sunset_label', sunset=sunset)
                )

                dates.append(date)
                temps.append(avg_temp)
                humidities.append(humidity)

            return forecast, (dates, temps, humidities), None


# üå§Ô∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏
async def get_hourly_forecast_data(city, date_str, user_lang_code='uk'):
    api_lang = WEATHERAPI_LANG_MAP.get(user_lang_code.split('_')[0].lower(), 'en')
    # WeatherAPI's 'forecast' endpoint provides hourly data for 'days' number of days
    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={city}&days=3&lang={api_lang}" # –ó–∞–ø–∏—Ç –Ω–∞ 3 –¥–Ω—ñ –¥–ª—è –ø–æ–≥–æ–¥–∏–Ω–Ω–æ—ó

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                return None, None, get_translated_text(user_lang_code, 'error_data')

            data = await response.json()
            location_name = data['location']['name']
            
            # –ó–Ω–∞–π–¥–µ–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó –¥–∞—Ç–∏
            target_day_data = None
            for day_data in data["forecast"]["forecastday"]:
                if day_data["date"] == date_str:
                    target_day_data = day_data
                    break
            
            if not target_day_data:
                return None, None, get_translated_text(user_lang_code, 'no_hourly_data')

            hourly_forecasts = []
            hourly_temps = []
            hourly_times = []

            for hour_data in target_day_data['hour']:
                # Parse the full datetime string
                full_datetime_str = hour_data['time']
                full_datetime_obj = datetime.strptime(full_datetime_str, '%Y-%m-%d %H:%M')
                
                # Only include future or current hours
                if full_datetime_obj >= datetime.now():
                    time_only_str = full_datetime_obj.strftime('%H:%M')
                    temp = hour_data['temp_c']
                    condition = hour_data['condition']['text']
                    wind = hour_data['wind_kph']
                    
                    hourly_forecasts.append(get_translated_text(user_lang_code, 'hourly_details',
                                                                time=time_only_str,
                                                                temp=temp,
                                                                condition=condition,
                                                                wind=wind))
                    hourly_temps.append(temp)
                    hourly_times.append(time_only_str) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∏—à–µ —á–∞—Å –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—É

            if not hourly_forecasts:
                return None, None, get_translated_text(user_lang_code, 'no_hourly_data')
            
            forecast_text = get_translated_text(user_lang_code, 'hourly_forecast_for', location_name=location_name) + "\n\n"
            forecast_text += "\n".join(hourly_forecasts)

            return forecast_text, (hourly_times, hourly_temps), None


# --- –§—É–Ω–∫—Ü—ñ—ó –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ ---
def generate_humidity_chart(dates, humidities, user_lang_code='uk'):
    plt.figure(figsize=(8, 4))
    plt.plot(dates, humidities, marker='o', linestyle='-', color='mediumseagreen')
    plt.title(get_translated_text(user_lang_code, 'chart_humidity_title'))
    plt.xlabel(get_translated_text(user_lang_code, 'xaxis_title'))
    plt.ylabel(get_translated_text(user_lang_code, 'humidity_legend'))
    plt.grid(False)
    plt.xticks(rotation=45)

    buffer = BytesIO()
    plt.tight_layout()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()
    return buffer


def generate_interactive_chart(dates, temps, humidities, user_lang_code='uk'):
    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=dates, y=temps, mode='lines+markers',
        name=get_translated_text(user_lang_code, 'temp_legend'),
        line=dict(color='skyblue')
    ))

    fig.add_trace(go.Scatter(
        x=dates, y=humidities, mode='lines+markers',
        name=get_translated_text(user_lang_code, 'humidity_legend'),
        line=dict(color='mediumseagreen')
    ))

    fig.update_layout(
        title=get_translated_text(user_lang_code, 'chart_interactive_title'),
        xaxis_title=get_translated_text(user_lang_code, 'xaxis_title'),
        yaxis_title=get_translated_text(user_lang_code, 'yaxis_title'),
        hovermode='x unified'
    )

    buffer = BytesIO()
    html_bytes = fig.to_html(full_html=False, include_plotlyjs='cdn').encode()
    buffer.write(html_bytes)
    buffer.seek(0)
    return buffer


def generate_temp_chart(dates, temps, user_lang_code='uk'):
    plt.figure(figsize=(8, 4))
    plt.plot(dates, temps, marker='o', linestyle='-', color='skyblue')
    plt.title(get_translated_text(user_lang_code, 'chart_temp_title'))
    plt.xlabel(get_translated_text(user_lang_code, 'xaxis_title'))
    plt.ylabel(get_translated_text(user_lang_code, 'temp_legend'))
    plt.grid(False)
    plt.xticks(rotation=45)

    buffer = BytesIO()
    plt.tight_layout()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()
    return buffer

def generate_hourly_temp_chart(times, temps, user_lang_code='uk'):
    plt.figure(figsize=(10, 5))
    plt.plot(times, temps, marker='o', linestyle='-', color='purple')
    plt.title(get_translated_text(user_lang_code, 'hourly_chart_title'))
    plt.xlabel(get_translated_text(user_lang_code, 'xaxis_title'))
    plt.ylabel(get_translated_text(user_lang_code, 'temp_legend'))
    plt.grid(True)
    
    # –í–∏–±–∏—Ä–∞—î–º–æ –∫–æ–∂–Ω—É –¥—Ä—É–≥—É/—Ç—Ä–µ—Ç—é –≥–æ–¥–∏–Ω—É –¥–ª—è –º—ñ—Ç–æ–∫, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è
    n = max(1, len(times) // 8) # –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–±–ª–∏–∑–Ω–æ 8 –º—ñ—Ç–æ–∫
    plt.xticks(times[::n], rotation=45, ha='right')

    buffer = BytesIO()
    plt.tight_layout()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()
    return buffer

# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
def get_start_keyboard(user_lang_code: str):
    keyboard = [
        [InlineKeyboardButton("–ö–∏—ó–≤", callback_data='–ö–∏—ó–≤')],
        [InlineKeyboardButton("–õ—å–≤—ñ–≤", callback_data='–õ—å–≤—ñ–≤')],
        [InlineKeyboardButton("–•–∞—Ä–∫—ñ–≤", callback_data='–•–∞—Ä–∫—ñ–≤')],
        [InlineKeyboardButton("–û–¥–µ—Å–∞", callback_data='–û–¥–µ—Å–∞')],
        [InlineKeyboardButton(get_translated_text(user_lang_code, 'choose_city_button'), callback_data='manual')]
    ]
    return InlineKeyboardMarkup(keyboard)

# üöÄ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_lang_code = update.effective_user.language_code if update.effective_user else 'uk'

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–µ—Ä—à–µ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ—Ä–æ—Ç–∫–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
    await update.message.reply_text(get_translated_text(user_lang_code, 'initial_welcome'), parse_mode="Markdown")

    reply_markup = get_start_keyboard(user_lang_code)
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–∞–ø–∏—Ç–æ–º –æ–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ
    await update.message.reply_text(get_translated_text(user_lang_code, 'greeting_start'), reply_markup=reply_markup)


# üì• –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_lang_code = update.effective_user.language_code if update.effective_user else 'uk'

    city = update.message.text.strip()
    await update.message.reply_text(get_translated_text(user_lang_code, 'searching_city', city_name=city),
                                     parse_mode="Markdown")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –≤ `context.user_data` –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    context.user_data['current_city'] = city

    forecast, temp_data, error = await get_weather_forecast(translit(city), user_lang_code)

    if error:
        await update.message.reply_text(error)
    else:
        await update.message.reply_text(forecast, parse_mode="Markdown")

        dates, temps, humidities = temp_data
        chart_image = generate_temp_chart(dates, temps, user_lang_code)
        await update.message.reply_photo(photo=chart_image,
                                         caption=get_translated_text(user_lang_code, 'chart_temp_caption'))
        humidity_chart = generate_humidity_chart(dates, humidities, user_lang_code)
        await update.message.reply_photo(photo=humidity_chart,
                                         caption=get_translated_text(user_lang_code, 'chart_humidity_caption'))
        interactive = generate_interactive_chart(dates, temps, humidities, user_lang_code)
        await update.message.reply_document(document=interactive, filename=get_translated_text(user_lang_code,
                                                                                                'chart_interactive_caption_filename'),
                                             caption=get_translated_text(user_lang_code, 'chart_interactive_caption'))

        # --- –î–û–î–ê–ù–û: –ö–Ω–æ–ø–∫–∞ "–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ –ø–æ–≥–æ–¥–∞" —Ç–∞ "–Ü–Ω—à–µ –º—ñ—Å—Ç–æ" ---
        keyboard = [
            [InlineKeyboardButton(get_translated_text(user_lang_code, 'hourly_weather_button'), callback_data=f'hourly_weather_{translit(city)}')],
            [InlineKeyboardButton(get_translated_text(user_lang_code, 'choose_city_button'), callback_data='manual')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(get_translated_text(user_lang_code, 'additional_options_prompt'), reply_markup=reply_markup)


async def handle_city_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_lang_code = update.effective_user.language_code if update.effective_user else 'uk'

    city_data = query.data
    if city_data == "manual":
        await query.edit_message_text(get_translated_text(user_lang_code, 'manual_city_prompt'))
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –≤ `context.user_data` –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    context.user_data['current_city'] = city_data

    await query.edit_message_text(get_translated_text(user_lang_code, 'getting_forecast_for', city_name=city_data),
                                  parse_mode="Markdown")

    forecast, temp_data, error = await get_weather_forecast(translit(city_data), user_lang_code)

    if error:
        await context.bot.send_message(chat_id=query.message.chat.id, text=error)
    else:
        await context.bot.send_message(chat_id=query.message.chat.id, text=forecast, parse_mode="Markdown")

        dates, temps, humidities = temp_data
        chart = generate_temp_chart(dates, temps, user_lang_code)
        await context.bot.send_photo(chat_id=query.message.chat.id, photo=chart,
                                     caption=get_translated_text(user_lang_code, 'chart_temp_caption'))
        humidity_chart = generate_humidity_chart(dates, humidities, user_lang_code)
        await context.bot.send_photo(chat_id=query.message.chat.id, photo=humidity_chart,
                                     caption=get_translated_text(user_lang_code, 'chart_humidity_caption'))
        interactive = generate_interactive_chart(dates, temps, humidities, user_lang_code)
        await context.bot.send_document(chat_id=query.message.chat.id, document=interactive,
                                        filename=get_translated_text(user_lang_code,
                                                                      'chart_interactive_caption_filename'),
                                        caption=get_translated_text(user_lang_code, 'chart_interactive_caption'))

        # --- –î–û–î–ê–ù–û: –ö–Ω–æ–ø–∫–∞ "–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ –ø–æ–≥–æ–¥–∞" —Ç–∞ "–Ü–Ω—à–µ –º—ñ—Å—Ç–æ" ---
        keyboard = [
            [InlineKeyboardButton(get_translated_text(user_lang_code, 'hourly_weather_button'), callback_data=f'hourly_weather_{translit(city_data)}')],
            [InlineKeyboardButton(get_translated_text(user_lang_code, 'choose_city_button'), callback_data='manual')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=query.message.chat.id, text=get_translated_text(user_lang_code, 'additional_options_prompt'), reply_markup=reply_markup)


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–æ–¥–∏–Ω–Ω–∞ –ø–æ–≥–æ–¥–∞"
async def handle_hourly_weather_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_lang_code = update.effective_user.language_code if update.effective_user else 'uk'
    
    # query.data –±—É–¥–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏ —è–∫ 'hourly_weather_Kyiv'
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, –≤—ñ–¥–∫–∏–¥–∞—é—á–∏ –ø—Ä–µ—Ñ—ñ–∫—Å 'hourly_weather_'
    city = query.data.replace('hourly_weather_', '')
    context.user_data['current_city'] = city # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ—Å—Ç–æ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω—ñ–≤, —â–æ–± –¥—ñ—Å—Ç–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏
    # –ú–∏ –≤–∂–µ –º–∞—î–º–æ –ª–æ–≥—ñ–∫—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è 7-–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É, —Ç–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —ó—ó.
    
    _, temp_data, error = await get_weather_forecast(city, user_lang_code)

    if error:
        await context.bot.send_message(chat_id=query.message.chat.id, text=error)
        return
    
    dates = temp_data[0] # –î–∞—Ç–∏ –∑ 7-–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É

    keyboard = []
    # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–±–ª–∏–∂—á—ñ 3 –¥–Ω—ñ, –¥–ª—è —è–∫–∏—Ö WeatherAPI –∑–∞–∑–≤–∏—á–∞–π –Ω–∞–¥–∞—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
    for date in dates[:3]:
        # Callback data –¥–ª—è –ø–æ–≥–æ–¥–∏–Ω–Ω–æ—ó –ø–æ–≥–æ–¥–∏ –±—É–¥–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏ 'show_hourly_2025-08-04'
        keyboard.append([InlineKeyboardButton(date, callback_data=f'show_hourly_{date}')])
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –º—ñ—Å—Ç–∞
    keyboard.append([InlineKeyboardButton(get_translated_text(user_lang_code, 'hourly_back_to_main_menu'), callback_data='back_to_main_menu')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=get_translated_text(user_lang_code, 'choose_date_hourly'),
        reply_markup=reply_markup
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏ –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
async def handle_hourly_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_lang_code = update.effective_user.language_code if update.effective_user else 'uk'

    if query.data == 'back_to_main_menu':
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é –º—ñ—Å—Ç–∞", –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–µ–Ω—é.
        await query.edit_message_text(get_translated_text(user_lang_code, 'greeting_start'), reply_markup=get_start_keyboard(user_lang_code))
        return

    # query.data –±—É–¥–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏ —è–∫ 'show_hourly_2025-08-04'
    date_str = query.data.replace('show_hourly_', '')
    
    city = context.user_data.get('current_city')
    if not city:
        await query.edit_message_text(get_translated_text(user_lang_code, 'error_data'))
        return

    await query.edit_message_text(get_translated_text(user_lang_code, 'getting_forecast_for', city_name=city),
                                  parse_mode="Markdown")

    forecast_text, hourly_data, error = await get_hourly_forecast_data(translit(city), date_str, user_lang_code)

    if error:
        await context.bot.send_message(chat_id=query.message.chat.id, text=error)
    else:
        await context.bot.send_message(chat_id=query.message.chat.id, text=forecast_text, parse_mode="Markdown")
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ –ø–æ–≥–æ–¥–∏–Ω–Ω–æ—ó —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
        times, temps = hourly_data
        hourly_chart_image = generate_hourly_temp_chart(times, temps, user_lang_code)
        await context.bot.send_photo(chat_id=query.message.chat.id, photo=hourly_chart_image,
                                     caption=get_translated_text(user_lang_code, 'hourly_chart_caption'))
                                     
    # –ü—ñ—Å–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –º—ñ—Å—Ç–∞
    keyboard = [
        [InlineKeyboardButton(get_translated_text(user_lang_code, 'hourly_weather_button'), callback_data=f'hourly_weather_{translit(city)}')], # –ó–Ω–æ–≤—É –∫–Ω–æ–ø–∫–∞ –ø–æ–≥–æ–¥–∏–Ω–Ω–æ—ó –¥–ª—è —Ü—å–æ–≥–æ –∂ –º—ñ—Å—Ç–∞
        [InlineKeyboardButton(get_translated_text(user_lang_code, 'choose_city_button'), callback_data='manual')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=query.message.chat.id, text=get_translated_text(user_lang_code, 'what_next_prompt'), reply_markup=reply_markup)


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ Application –Ω–∞ –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä—ñ–≤–Ω—ñ –º–æ–¥—É–ª—è
# –¶–µ –¥–æ–∑–≤–æ–ª—è—î uvicorn —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ "app"
# –í–∞–∂–ª–∏–≤–æ: BOT_TOKEN, WEBHOOK_URL —Ç–∞ WEATHER_API_KEY –º–∞—é—Ç—å –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —è–∫ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º uvicorn
try:
    app = ApplicationBuilder().token(BOT_TOKEN).build()
except Exception as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó ApplicationBuilder: {e}")
    # –Ø–∫—â–æ BOT_TOKEN –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –ø—Ä–æ–≥—Ä–∞–º–∞ –Ω–µ –∑–º–æ–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Application
    # —ñ uvicorn –Ω–µ –∑–º–æ–∂–µ –∑–Ω–∞–π—Ç–∏ 'app'.
    # –ú–∏ –≤–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ, —â–æ–± –¥–æ–∑–≤–æ–ª–∏—Ç–∏ 'if __name__ == "__main__":' –æ–±—Ä–æ–±–ª—è—Ç–∏ –≤–∏—Ö—ñ–¥.
    app = None # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ app —è–∫ None, —è–∫—â–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è


if __name__ == '__main__':
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–∏ –∑–º—ñ–Ω–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –ø–µ—Ä—à –Ω—ñ–∂ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –±–æ—Ç–∞
    # –Ø–∫—â–æ app == None, —Ü–µ –æ–∑–Ω–∞—á–∞—î, —â–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∏—â–µ –Ω–µ –≤–¥–∞–ª–∞—Å—è (–º–æ–∂–ª–∏–≤–æ, —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π BOT_TOKEN)
    if not BOT_TOKEN:
        print("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: BOT_TOKEN –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∏–π.")
        sys.exit(1) # –ó—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫—â–æ –Ω–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞
    if not WEBHOOK_URL:
        print("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: WEBHOOK_URL –≤—ñ–¥—Å—É—Ç–Ω—è. –í–æ–Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è Webhooks. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∏–π.")
        sys.exit(1) # –ó—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫—â–æ –Ω–µ–º–∞—î URL –≤–µ–±—Ö—É–∫–∞
    if not WEATHER_API_KEY:
        print("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: WEATHER_API_KEY –≤—ñ–¥—Å—É—Ç–Ω—ñ–π. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∏–π.")
        sys.exit(1) # –ó—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫—â–æ –Ω–µ–º–∞—î –∫–ª—é—á–∞ API –ø–æ–≥–æ–¥–∏

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ 'app' —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
    if app:
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(handle_city_button, pattern='^(–ö–∏—ó–≤|–õ—å–≤—ñ–≤|–•–∞—Ä–∫—ñ–≤|–û–¥–µ—Å–∞|manual)$'))
        app.add_handler(CallbackQueryHandler(handle_hourly_weather_button, pattern='^hourly_weather_.*$'))
        app.add_handler(CallbackQueryHandler(handle_hourly_date_selection, pattern='^show_hourly_.*$|^back_to_main_menu$'))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        print(f"‚úÖ –ë–æ—Ç –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –Ω–∞ Webhooks. –°–ª—É—Ö–∞—é –Ω–∞ –ø–æ—Ä—Ç—É {PORT}, —à–ª—è—Ö /telegram.")

        app.run_webhook(
            listen="0.0.0.0",      # –°–ª—É—Ö–∞—Ç–∏ –Ω–∞ –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
            port=PORT,             # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–æ—Ä—Ç, –Ω–∞–¥–∞–Ω–∏–π Render.com (—á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ $PORT)
            url_path="/telegram",  # –®–ª—è—Ö –Ω–∞ –≤–∞—à–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ, –∫—É–¥–∏ Telegram –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            webhook_url=f"{WEBHOOK_URL}/telegram" # –ü–æ–≤–Ω–∏–π URL –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫—É –Ω–∞ Telegram
        )
    else:
        print("–ë–æ—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∏–π, –æ—Å–∫—ñ–ª—å–∫–∏ 'app' –Ω–µ –±—É–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –Ω–µ–¥—ñ–π—Å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        sys.exit(1)
