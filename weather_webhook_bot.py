from datetime import time
from telegram.ext import MessageHandler, filters, CallbackContext
import plotly.graph_objs as go
from translitua import translit, RussianSimple
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler
import matplotlib.pyplot as plt
from io import BytesIO
import aiohttp
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# üîß –í–°–¢–ê–í –°–í–Ü–ô API KEY –¢–£–¢
WEATHER_API_KEY = "a3c564f1bb164e2fa31182534253107"
BOT_TOKEN = "7602321117:AAEfDXsoD2OYrPYWAmUIYSDtw1H8IFFGMuA"

# --- –°–ª–æ–≤–Ω–∏–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ ---
TRANSLATIONS = {
    'uk': {
        'initial_welcome': "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥ Weather Online Bot! üå§Ô∏è\n\n–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 7 –¥–Ω—ñ–≤ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º—ñ—Å—Ç–∞ —Å–≤—ñ—Ç—É, –∞ —Ç–∞–∫–æ–∂ –ø–æ–∫–∞–∂—É –∑—Ä—É—á–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ —Ç–∞ –≤–æ–ª–æ–≥–æ—Å—Ç—ñ.",
        'greeting_start': "–û–±–µ—Ä–∏ –º—ñ—Å—Ç–æ –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥–∏ –π–æ–≥–æ –Ω–∞–∑–≤—É:",
        'searching_city': "üîé –®—É–∫–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è: *{city_name}*...",
        'forecast_for': "üìç –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è *{location_name}, {country_name}* –Ω–∞ 7 –¥–Ω—ñ–≤:\n\n",
        'date_label': "üìÖ *{date}*",
        'condition_label': "üå§Ô∏è {condition}",
        'temperature_label': "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {min_temp}¬∞C - {max_temp}¬∞C (—Å–µ—Ä–µ–¥–Ω—è: {avg_temp}¬∞C)",
        'humidity_label': "üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%",
        'wind_label': "üí® –í—ñ—Ç–µ—Ä: {wind} –∫–º/–≥–æ–¥",
        'uv_index_label': "‚òÄÔ∏è –£–§-—ñ–Ω–¥–µ–∫—Å: {uv_index}",
        'chance_rain_label': "‚òÇÔ∏è –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –¥–æ—â—É: {chance_rain}%",
        'chance_snow_label': "‚ùÑÔ∏è –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Å–Ω—ñ–≥—É: {chance_snow}%",
        'sunrise_label': "‚¨ÜÔ∏è –°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunrise}",
        'sunset_label': "‚¨áÔ∏è –ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunset}\n\n",
        'error_data': "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞.",
        'chart_temp_title': "–°–µ—Ä–µ–¥–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ 7 –¥–Ω—ñ–≤",
        'chart_humidity_title': "üìà –°–µ—Ä–µ–¥–Ω—è –≤–æ–ª–æ–≥—ñ—Å—Ç—å –Ω–∞ 7 –¥–Ω—ñ–≤",
        'chart_interactive_title': "üìä –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–∞ –í–æ–ª–æ–≥—ñ—Å—Ç—å",
        'chart_temp_caption': "üìä –ì—Ä–∞—Ñ—ñ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏",
        'chart_humidity_caption': "üíß –ì—Ä–∞—Ñ—ñ–∫ –≤–æ–ª–æ–≥–æ—Å—Ç—ñ",
        'chart_interactive_caption': "üß† –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ (–≤—ñ–¥–∫—Ä–∏–π —É –±—Ä–∞—É–∑–µ—Ä—ñ)",
        'choose_city_button': "–Ü–Ω—à–µ –º—ñ—Å—Ç–æ üìù",
        'manual_city_prompt': "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –≤—Ä—É—á–Ω—É:",
        'getting_forecast_for': "üîé –û—Ç—Ä–∏–º—É—é –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: *{city_name}*...",
        'xaxis_title': "–î–∞—Ç–∞",
        'yaxis_title': "–ó–Ω–∞—á–µ–Ω–Ω—è",
        'temp_legend': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
        'humidity_legend': '–í–æ–ª–æ–≥—ñ—Å—Ç—å (%)',
        'chart_interactive_caption_filename': "–ì—Ä–∞—Ñ—ñ–∫_–ø–æ–≥–æ–¥–∏.html",
    },
    'en': {
        'initial_welcome': "üëã Hello! I'm your personal meteorologist, Weather Online Bot! üå§Ô∏è\n\nI'll help you get a detailed 7-day weather forecast for any city in the world, and also show you convenient temperature and humidity charts.",
        'greeting_start': "Choose a city below or enter its name:",
        'searching_city': "üîé Searching for weather forecast for: *{city_name}*...",
        'forecast_for': "üìç Weather forecast for *{location_name}, {country_name}* for 7 days:\n\n",
        'date_label': "üìÖ *{date}*",
        'condition_label': "üå§Ô∏è {condition}",
        'temperature_label': "üå°Ô∏è Temperature: {min_temp}¬∞C - {max_temp}¬∞C (average: {avg_temp}¬∞C)",
        'humidity_label': "üíß Humidity: {humidity}%",
        'wind_label': "üí® Wind: {wind} km/h",
        'uv_index_label': "‚òÄÔ∏è UV Index: {uv_index}",
        'chance_rain_label': "‚òÇÔ∏è Chance of rain: {chance_rain}%",
        'chance_snow_label': "‚ùÑÔ∏è Chance of snow: {chance_snow}%",
        'sunrise_label': "‚¨ÜÔ∏è Sunrise: {sunrise}",
        'sunset_label': "‚¨áÔ∏è Sunset: {sunset}\n\n",
        'error_data': "‚ö†Ô∏è Failed to get data. Please check the city name.",
        'chart_temp_title': "Average Temperature for 7 Days",
        'chart_humidity_title': "üìà Average Humidity for 7 Days",
        'chart_interactive_title': "üìä Interactive Chart: Temperature & Humidity",
        'chart_temp_caption': "üìä Temperature Chart",
        'chart_humidity_caption': "üíß Humidity Chart",
        'chart_interactive_caption': "üß† Interactive Chart (open in browser)",
        'choose_city_button': "Other city üìù",
        'manual_city_prompt': "‚úçÔ∏è Enter city name manually:",
        'getting_forecast_for': "üîé Getting forecast for: *{city_name}*...",
        'xaxis_title': "Date",
        'yaxis_title': "Value",
        'temp_legend': 'Temperature (¬∞C)',
        'humidity_legend': 'Humidity (%)',
        'chart_interactive_caption_filename': "Weather_Chart.html",
    }
}

# –ú–∞–ø—É–≤–∞–Ω–Ω—è –∫–æ–¥—ñ–≤ –º–æ–≤ Telegram –Ω–∞ –∫–æ–¥–∏ –º–æ–≤ WeatherAPI
WEATHERAPI_LANG_MAP = {
    'uk': 'uk', 'en': 'en', 'ru': 'ru', 'pl': 'pl', 'es': 'es', 'fr': 'fr', 'de': 'de',
    'pt': 'pt', 'ja': 'ja', 'ko': 'ko', 'it': 'it', 'nl': 'nl', 'th': 'th', 'vi': 'vi',
    'ar': 'ar', 'hi': 'hi', 'bn': 'bn', 'el': 'el', 'hu': 'hu', 'id': 'id', 'fa': 'fa',
    'tl': 'tl', 'tr': 'tr', 'zh': 'zh', 'zh_TW': 'zh_TW'
}


def get_translated_text(user_language_code: str, key: str, **kwargs) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –∑–∞ –∫–ª—é—á–µ–º —Ç–∞ –º–æ–≤–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    –Ø–∫—â–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è –º–æ–≤–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —É–∫—Ä–∞—ó–Ω—Å—å–∫—É (uk).
    """
    lang_code_short = user_language_code.split('_')[0].lower()

    lang_dict = TRANSLATIONS.get(lang_code_short, TRANSLATIONS['uk'])

    text = lang_dict.get(key, f"MISSING_TRANSLATION_KEY:{key}")

    try:
        formatted_text = text.format(**kwargs)
        return formatted_text
    except KeyError as e:
        print(f"ERROR: Missing placeholder for key '{e}' in translation for '{key}' in language '{lang_code_short}'")
        return text


# üå§Ô∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏
async def get_weather_forecast(city, user_lang_code='uk'):
    api_lang = WEATHERAPI_LANG_MAP.get(user_lang_code.split('_')[0].lower(), 'en')

    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={city}&days=7&lang={api_lang}"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                return None, None, get_translated_text(user_lang_code, 'error_data')

            data = await response.json()

            t_forecast_for = get_translated_text(user_lang_code, 'forecast_for',
                                                 location_name=data['location']['name'],
                                                 country_name=data['location']['country'])
            forecast = t_forecast_for

            dates = []
            temps = []
            humidities = []

            for day_data in data["forecast"]["forecastday"]:
                date = day_data["date"]
                day_details = day_data["day"]
                astro_details = day_data["astro"]

                condition = day_details["condition"]["text"]
                avg_temp = day_details["avgtemp_c"]
                max_temp = day_details["maxtemp_c"]
                min_temp = day_details["mintemp_c"]
                wind_kph = day_details["maxwind_kph"]
                humidity = day_details["avghumidity"]

                uv_index = day_details["uv"]
                daily_chance_of_rain = day_details["daily_chance_of_rain"]
                daily_chance_of_snow = day_details["daily_chance_of_snow"]

                sunrise = astro_details["sunrise"]
                sunset = astro_details["sunset"]

                forecast += (
                        get_translated_text(user_lang_code, 'date_label', date=date) + "\n" +
                        get_translated_text(user_lang_code, 'condition_label', condition=condition) + "\n" +
                        get_translated_text(user_lang_code, 'temperature_label', min_temp=min_temp, max_temp=max_temp,
                                            avg_temp=avg_temp) + "\n" +
                        get_translated_text(user_lang_code, 'humidity_label', humidity=humidity) + "\n" +
                        get_translated_text(user_lang_code, 'wind_label', wind=wind_kph) + "\n" +
                        get_translated_text(user_lang_code, 'uv_index_label', uv_index=uv_index) + "\n" +
                        get_translated_text(user_lang_code, 'chance_rain_label',
                                            chance_rain=daily_chance_of_rain) + "\n" +
                        get_translated_text(user_lang_code, 'chance_snow_label',
                                            chance_snow=daily_chance_of_snow) + "\n" +
                        get_translated_text(user_lang_code, 'sunrise_label', sunrise=sunrise) + "\n" +
                        get_translated_text(user_lang_code, 'sunset_label', sunset=sunset)
                )

                dates.append(date)
                temps.append(avg_temp)
                humidities.append(humidity)

            return forecast, (dates, temps, humidities), None


# --- –§—É–Ω–∫—Ü—ñ—ó –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ ---
def generate_humidity_chart(dates, humidities, user_lang_code='uk'):
    plt.figure(figsize=(8, 4))
    plt.plot(dates, humidities, marker='o', linestyle='-', color='mediumseagreen')
    plt.title(get_translated_text(user_lang_code, 'chart_humidity_title'))
    plt.xlabel(get_translated_text(user_lang_code, 'xaxis_title'))
    plt.ylabel(get_translated_text(user_lang_code, 'humidity_legend'))
    plt.grid(False)
    plt.xticks(rotation=45)

    buffer = BytesIO()
    plt.tight_layout()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()
    return buffer


def generate_interactive_chart(dates, temps, humidities, user_lang_code='uk'):
    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=dates, y=temps, mode='lines+markers',
        name=get_translated_text(user_lang_code, 'temp_legend'),
        line=dict(color='skyblue')
    ))

    fig.add_trace(go.Scatter(
        x=dates, y=humidities, mode='lines+markers',
        name=get_translated_text(user_lang_code, 'humidity_legend'),
        line=dict(color='mediumseagreen')
    ))

    fig.update_layout(
        title=get_translated_text(user_lang_code, 'chart_interactive_title'),
        xaxis_title=get_translated_text(user_lang_code, 'xaxis_title'),
        yaxis_title=get_translated_text(user_lang_code, 'yaxis_title'),
        hovermode='x unified'
    )

    buffer = BytesIO()
    html_bytes = fig.to_html(full_html=False, include_plotlyjs='cdn').encode()
    buffer.write(html_bytes)
    buffer.seek(0)
    return buffer


def generate_temp_chart(dates, temps, user_lang_code='uk'):
    plt.figure(figsize=(8, 4))
    plt.plot(dates, temps, marker='o', linestyle='-', color='skyblue')
    plt.title(get_translated_text(user_lang_code, 'chart_temp_title'))
    plt.xlabel(get_translated_text(user_lang_code, 'xaxis_title'))
    plt.ylabel(get_translated_text(user_lang_code, 'temp_legend'))
    plt.grid(False)
    plt.xticks(rotation=45)

    buffer = BytesIO()
    plt.tight_layout()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()
    return buffer


# üöÄ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_lang_code = update.effective_user.language_code if update.effective_user else 'uk'

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–µ—Ä—à–µ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ—Ä–æ—Ç–∫–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
    await update.message.reply_text(get_translated_text(user_lang_code, 'initial_welcome'), parse_mode="Markdown")

    keyboard = [
        [InlineKeyboardButton("–ö–∏—ó–≤", callback_data='–ö–∏—ó–≤')],
        [InlineKeyboardButton("–õ—å–≤—ñ–≤", callback_data='–õ—å–≤—ñ–≤')],
        [InlineKeyboardButton("–•–∞—Ä–∫—ñ–≤", callback_data='–•–∞—Ä–∫—ñ–≤')],
        [InlineKeyboardButton("–û–¥–µ—Å–∞", callback_data='–û–¥–µ—Å–∞')],
        [InlineKeyboardButton(get_translated_text(user_lang_code, 'choose_city_button'), callback_data='manual')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∑–∞–ø–∏—Ç–æ–º –æ–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ
    await update.message.reply_text(get_translated_text(user_lang_code, 'greeting_start'), reply_markup=reply_markup)


# üì• –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_lang_code = update.effective_user.language_code if update.effective_user else 'uk'

    city = update.message.text.strip()
    await update.message.reply_text(get_translated_text(user_lang_code, 'searching_city', city_name=city),
                                    parse_mode="Markdown")

    forecast, temp_data, error = await get_weather_forecast(translit(city), user_lang_code)

    if error:
        await update.message.reply_text(error)
    else:
        await update.message.reply_text(forecast, parse_mode="Markdown")

        dates, temps, humidities = temp_data
        chart_image = generate_temp_chart(dates, temps, user_lang_code)
        await update.message.reply_photo(photo=chart_image,
                                         caption=get_translated_text(user_lang_code, 'chart_temp_caption'))
        humidity_chart = generate_humidity_chart(dates, humidities, user_lang_code)
        await update.message.reply_photo(photo=humidity_chart,
                                         caption=get_translated_text(user_lang_code, 'chart_humidity_caption'))
        interactive = generate_interactive_chart(dates, temps, humidities, user_lang_code)
        await update.message.reply_document(document=interactive, filename=get_translated_text(user_lang_code,
                                                                                               'chart_interactive_caption_filename'),
                                            caption=get_translated_text(user_lang_code, 'chart_interactive_caption'))


async def handle_city_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_lang_code = update.effective_user.language_code if update.effective_user else 'uk'

    city = query.data
    if city == "manual":
        await query.edit_message_text(get_translated_text(user_lang_code, 'manual_city_prompt'))
        return

    await query.edit_message_text(get_translated_text(user_lang_code, 'getting_forecast_for', city_name=city),
                                  parse_mode="Markdown")

    forecast, temp_data, error = await get_weather_forecast(translit(city), user_lang_code)

    if error:
        await context.bot.send_message(chat_id=query.message.chat.id, text=error)
    else:
        await context.bot.send_message(chat_id=query.message.chat.id, text=forecast, parse_mode="Markdown")

        dates, temps, humidities = temp_data
        chart = generate_temp_chart(dates, temps, user_lang_code)
        await context.bot.send_photo(chat_id=query.message.chat.id, photo=chart,
                                     caption=get_translated_text(user_lang_code, 'chart_temp_caption'))
        humidity_chart = generate_humidity_chart(dates, humidities, user_lang_code)
        await context.bot.send_photo(chat_id=query.message.chat.id, photo=humidity_chart,
                                     caption=get_translated_text(user_lang_code, 'chart_humidity_caption'))
        interactive = generate_interactive_chart(dates, temps, humidities, user_lang_code)
        await context.bot.send_document(chat_id=query.message.chat.id, document=interactive,
                                        filename=get_translated_text(user_lang_code,
                                                                     'chart_interactive_caption_filename'),
                                        caption=get_translated_text(user_lang_code, 'chart_interactive_caption'))


# üß† –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_city_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î. –û—á—ñ–∫—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    app.run_polling()